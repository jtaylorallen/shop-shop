{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { execute } from \"../link/core/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, removeConnectionDirectiveFromDocument, canUseWeakMap, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject } from \"../utilities/index.js\";\nimport { ApolloError, isApolloError } from \"../errors/index.js\";\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { LocalState } from \"./LocalState.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n        link = _a.link,\n        _b = _a.queryDeduplication,\n        queryDeduplication = _b === void 0 ? false : _b,\n        onBroadcast = _a.onBroadcast,\n        _c = _a.ssrMode,\n        ssrMode = _c === void 0 ? false : _c,\n        _d = _a.clientAwareness,\n        clientAwareness = _d === void 0 ? {} : _d,\n        localState = _a.localState,\n        assumeImmutableResults = _a.assumeImmutableResults;\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n\n    if (this.onBroadcast = onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('QueryManager stopped while query was in flight') : new InvariantError(11));\n  };\n\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        updateQueries = _a.updateQueries,\n        _b = _a.refetchQueries,\n        refetchQueries = _b === void 0 ? [] : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        updateWithProxyFn = _a.update,\n        onQueryUpdated = _a.onQueryUpdated,\n        _d = _a.errorPolicy,\n        errorPolicy = _d === void 0 ? 'none' : _d,\n        _e = _a.fetchPolicy,\n        fetchPolicy = _e === void 0 ? 'network-only' : _e,\n        keepRootFields = _a.keepRootFields,\n        context = _a.context;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, mutationStoreValue, self;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            __DEV__ ? invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.') : invariant(mutation, 12);\n            __DEV__ ? invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\") : invariant(fetchPolicy === 'network-only' || fetchPolicy === 'no-cache', 13);\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n\n            if (optimisticResponse) {\n              this.markMutationOptimistic(optimisticResponse, {\n                mutationId: mutationId,\n                document: mutation,\n                variables: variables,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n                context: context,\n                updateQueries: updateQueries,\n                update: updateWithProxyFn,\n                keepRootFields: keepRootFields\n              });\n            }\n\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                  throw new ApolloError({\n                    graphQLErrors: result.errors\n                  });\n                }\n\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n\n                var storeResult = __assign({}, result);\n\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n\n                if (errorPolicy === 'ignore' && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: optimisticResponse ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  resolve(storeResult);\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables\n      });\n      var updateQueries_1 = mutation.updateQueries;\n\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n\n          var updater = updateQueries_1[queryName];\n\n          var _b = _this.queries.get(queryId),\n              document = _b.document,\n              variables = _b.variables;\n\n          var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n              currentQueryResult = _c.result,\n              complete = _c.complete;\n\n          if (complete && currentQueryResult) {\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (cacheWrites.length > 0 || mutation.refetchQueries || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n\n          var update = mutation.update;\n\n          if (update) {\n            if (!skipCache) {\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                query: _this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables\n            });\n          }\n\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                    DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        optimistic: false,\n        removeOptimistic: mutation.removeOptimistic,\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n\n    return Promise.resolve(result);\n  };\n\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables) : optimisticResponse;\n    return this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        __DEV__ && invariant.error(error);\n      }\n    }, mutation.mutationId);\n  };\n\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n        asQuery: __assign(__assign({}, transformed), {\n          definitions: transformed.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n\n            return def;\n          })\n        })\n      };\n\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document);\n  };\n\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    this.queries.set(observable.queryId, queryInfo);\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n\n    __DEV__ ? invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.') : invariant(options.query, 14);\n    __DEV__ ? invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.') : invariant(options.query.kind === 'Document', 15);\n    __DEV__ ? invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.') : invariant(!options.returnPartialData, 16);\n    __DEV__ ? invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.') : invariant(!options.pollInterval, 17);\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n\n    this.cancelPendingFetches(__DEV__ ? new InvariantError('Store reset while query was in flight (not completed in link chain)') : new InvariantError(18));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    return this.cache.reset(options);\n  };\n\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n\n    if (include === void 0) {\n      include = \"active\";\n    }\n\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n          document = _a.document;\n\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        var queryName = oq.queryName,\n            fetchPolicy = oq.options.fetchPolicy;\n\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          __DEV__ && invariant.warn(\"Unknown query \".concat(typeof nameOrDoc === \"string\" ? \"named \" : \"\").concat(JSON.stringify(nameOrDoc, null, 2), \" requested in refetchQueries options.include array\"));\n        }\n      });\n    }\n\n    return queries;\n  };\n\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n\n    var query = _a.query,\n        fetchPolicy = _a.fetchPolicy,\n        errorPolicy = _a.errorPolicy,\n        variables = _a.variables,\n        _b = _a.context,\n        context = _b === void 0 ? {} : _b;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables).map(function (result) {\n        if (fetchPolicy !== 'no-cache') {\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n\n          _this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n\n        return result;\n      });\n    };\n\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n\n    return makeObservable(variables);\n  };\n\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  };\n\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n\n    var _a;\n\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n\n    if (serverQuery) {\n      var _b = this,\n          inFlightLinkObservables_1 = _b.inFlightLinkObservables,\n          link = _b.link;\n\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = canonicalStringify(variables);\n        observable = byVariables_1.get(varJson_1);\n\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n\n    var clientQuery = this.transform(query).clientQuery;\n\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n\n    return observable;\n  };\n\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n\n        queryInfo.markResult(result, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n\n      throw error;\n    });\n  };\n\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.errorPolicy,\n        errorPolicy = _b === void 0 ? \"none\" : _b,\n        _c = options.returnPartialData,\n        returnPartialData = _c === void 0 ? false : _c,\n        _d = options.notifyOnNetworkStatusChange,\n        notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n        _e = options.context,\n        context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n\n    this.fetchCancelFns.set(queryId, function (reason) {\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      _this.fetchCancelFns.delete(queryId);\n\n      applyNextFetchPolicy(options);\n    });\n    return concast;\n  };\n\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n\n    var updateCache = _a.updateCache,\n        include = _a.include,\n        _b = _a.optimistic,\n        optimistic = _b === void 0 ? false : _b,\n        _c = _a.removeOptimistic,\n        removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n        onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n\n    var results = new Map();\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        optimistic: optimistic && removeOptimistic || false,\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                result = oq.refetch();\n              }\n\n              if (result !== false) {\n                results.set(oq, result);\n              }\n\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n            lastDiff = _a.lastDiff,\n            diff = _a.diff;\n        var result;\n\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset();\n            diff = info.getDiff();\n          }\n\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  };\n\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, networkStatus) {\n    var _this = this;\n\n    var query = _a.query,\n        variables = _a.variables,\n        fetchPolicy = _a.fetchPolicy,\n        refetchWritePolicy = _a.refetchWritePolicy,\n        errorPolicy = _a.errorPolicy,\n        returnPartialData = _a.returnPartialData,\n        context = _a.context,\n        notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n\n    var readCache = function () {\n      return queryInfo.getDiff(variables);\n    };\n\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n\n      var data = diff.result;\n\n      if (__DEV__ && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n\n      if (data && _this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n\n      return fromData(data);\n    };\n\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 : 2;\n\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n\n          if (returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return [resultsFromCache(diff), resultsFromLink()];\n          }\n\n          return [resultsFromLink()];\n        }\n\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n\n      case \"network-only\":\n        if (shouldNotify) {\n          return [resultsFromCache(readCache()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"no-cache\":\n        if (shouldNotify) {\n          return [resultsFromCache(queryInfo.getDiff()), resultsFromLink()];\n        }\n\n        return [resultsFromLink()];\n\n      case \"standby\":\n        return [];\n    }\n  };\n\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n\n    return this.queries.get(queryId);\n  };\n\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n\n  return QueryManager;\n}();\n\nexport { QueryManager };","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","equal","execute","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","removeConnectionDirectiveFromDocument","canUseWeakMap","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","ApolloError","isApolloError","ObservableQuery","applyNextFetchPolicy","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","LocalState","QueryInfo","shouldWriteResult","Object","prototype","hasOwnProperty","_a","cache","link","_b","queryDeduplication","onBroadcast","_c","ssrMode","_d","clientAwareness","localState","assumeImmutableResults","Map","WeakMap","mutationStore","create","QueryManager","queries","forEach","_info","queryId","_this","stopQueryNoBroadcast","cancelPendingFetches","__DEV__","error","fetchCancelFns","clear","mutation","variables","optimisticResponse","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","onQueryUpdated","errorPolicy","_e","fetchPolicy","keepRootFields","context","_f","label","mutationId","generateMutationId","transform","document","mutationStoreValue","loading","markMutationOptimistic","update","broadcastQueries","self","Promise","resolve","reject","__assign","result","graphQLErrors","storeResult","removeOptimistic","subscribe","next","err","networkError","markMutationResult","cacheWrites","skipCache","push","dataId","query","updateQueries_1","observableQuery","queryName","get","returnPartialData","optimistic","currentQueryResult","complete","nextQueryResult","updater","mutationResult","queryVariables","results_1","updateCache","diff","id","asQuery","data","modify","fields","value","DELETE","include","recordOptimisticTransaction","fetchQuery","options","networkStatus","getQueryStore","store","info","resetErrors","queryInfo","undefined","transformCache","transformed","forLink","transformForLink","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","defaultVars","definitions","def","kind","operation","add","doc","getVariables","watchQuery","observable","queryManager","set","generateQueryId","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","desc","oq","size","getQuery","init","reFetchObservableQueries","includeStandby","observableQueryPromises","setObservableQuery","startGraphQLSubscription","makeObservable","map","write","addExportedVariables","then","observablePromise_1","sub","observer","stopQuery","removeQuery","delete","stop","getLocalState","getObservableFromLink","deduplication","inFlightLinkObservables_1","operationName","forceFetch","byVariables_1","varJson_1","concast","cleanup","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","hasErrors","requestId","markResult","aqr","fetchQueryObservable","notifyOnNetworkStatusChange","normalized","fromVariables","reason","setTimeout","includedQueriesById","lastDiff","results","batch","onWatchUpdated","watch","fetchQueryByPolicy","refetchWritePolicy","readCache","resultsFromCache","fromData","partial","onlyRunForcedResolvers","resultsFromLink","shouldNotify","oldNetworkStatus","has","prepareContext"],"sources":["../../src/core/QueryManager.ts"],"sourcesContent":["import { invariant, InvariantError } from '../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\n// TODO(brian): A hack until this issue is resolved (https://github.com/graphql/graphql-js/issues/3356)\ntype OperationTypeNode = any;\nimport { equal } from '@wry/equality';\n\nimport { ApolloLink, execute, FetchResult } from '../link/core';\nimport { Cache, ApolloCache, canonicalStringify } from '../cache';\n\nimport {\n  getDefaultValues,\n  getOperationDefinition,\n  getOperationName,\n  hasClientExports,\n  graphQLResultHasError,\n  removeConnectionDirectiveFromDocument,\n  canUseWeakMap,\n  ObservableSubscription,\n  Observable,\n  asyncMap,\n  isNonEmptyArray,\n  Concast,\n  ConcastSourcesIterable,\n  makeUniqueId,\n  isDocumentNode,\n  isNonNullObject,\n} from '../utilities';\nimport { ApolloError, isApolloError } from '../errors';\nimport {\n  QueryOptions,\n  WatchQueryOptions,\n  SubscriptionOptions,\n  MutationOptions,\n  WatchQueryFetchPolicy,\n  ErrorPolicy,\n  MutationFetchPolicy,\n} from './watchQueryOptions';\nimport { ObservableQuery, applyNextFetchPolicy, logMissingFieldErrors } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  MutationUpdaterFunction,\n  OnQueryUpdated,\n  InternalRefetchQueriesInclude,\n  InternalRefetchQueriesOptions,\n  InternalRefetchQueriesResult,\n  InternalRefetchQueriesMap,\n} from './types';\nimport { LocalState } from './LocalState';\n\nimport {\n  QueryInfo,\n  QueryStoreValue,\n  shouldWriteResult,\n  CacheWriteBehavior,\n} from './QueryInfo';\n\nconst { hasOwnProperty } = Object.prototype;\n\ninterface MutationStoreValue {\n  mutation: DocumentNode;\n  variables: Record<string, any>;\n  loading: boolean;\n  error: Error | null;\n}\n\ntype UpdateQueries<TData> = MutationOptions<TData, any, any>[\"updateQueries\"];\n\ninterface TransformCacheEntry {\n  document: DocumentNode;\n  hasClientExports: boolean;\n  hasForcedResolvers: boolean;\n  clientQuery: DocumentNode | null;\n  serverQuery: DocumentNode | null;\n  defaultVars: OperationVariables;\n  asQuery: DocumentNode;\n}\n\nexport class QueryManager<TStore> {\n  public cache: ApolloCache<TStore>;\n  public link: ApolloLink;\n  public readonly assumeImmutableResults: boolean;\n  public readonly ssrMode: boolean;\n\n  private queryDeduplication: boolean;\n  private clientAwareness: Record<string, string> = {};\n  private localState: LocalState<TStore>;\n\n  private onBroadcast?: () => void;\n  public mutationStore?: {\n    [mutationId: string]: MutationStoreValue;\n  };\n\n  // All the queries that the QueryManager is currently managing (not\n  // including mutations and subscriptions).\n  private queries = new Map<string, QueryInfo>();\n\n  // Maps from queryId strings to Promise rejection functions for\n  // currently active queries and fetches.\n  private fetchCancelFns = new Map<string, (error: any) => any>();\n\n  constructor({\n    cache,\n    link,\n    queryDeduplication = false,\n    onBroadcast,\n    ssrMode = false,\n    clientAwareness = {},\n    localState,\n    assumeImmutableResults,\n  }: {\n    cache: ApolloCache<TStore>;\n    link: ApolloLink;\n    queryDeduplication?: boolean;\n    onBroadcast?: () => void;\n    ssrMode?: boolean;\n    clientAwareness?: Record<string, string>;\n    localState?: LocalState<TStore>;\n    assumeImmutableResults?: boolean;\n  }) {\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({ cache });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n    if ((this.onBroadcast = onBroadcast)) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  public stop() {\n    this.queries.forEach((_info, queryId) => {\n      this.stopQueryNoBroadcast(queryId);\n    });\n\n    this.cancelPendingFetches(\n      new InvariantError('QueryManager stopped while query was in flight'),\n    );\n  }\n\n  private cancelPendingFetches(error: Error) {\n    this.fetchCancelFns.forEach(cancel => cancel(error));\n    this.fetchCancelFns.clear();\n  }\n\n  public async mutate<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >({\n    mutation,\n    variables,\n    optimisticResponse,\n    updateQueries,\n    refetchQueries = [],\n    awaitRefetchQueries = false,\n    update: updateWithProxyFn,\n    onQueryUpdated,\n    errorPolicy = 'none',\n    fetchPolicy = 'network-only',\n    keepRootFields,\n    context,\n  }: MutationOptions<TData, TVariables, TContext>): Promise<FetchResult<TData>> {\n    invariant(\n      mutation,\n      'mutation option is required. You must specify your GraphQL document in the mutation option.',\n    );\n\n    invariant(\n      fetchPolicy === 'network-only' ||\n      fetchPolicy === 'no-cache',\n      \"Mutations support only 'network-only' or 'no-cache' fetchPolicy strings. The default `network-only` behavior automatically writes mutation results to the cache. Passing `no-cache` skips the cache write.\"\n    );\n\n    const mutationId = this.generateMutationId();\n    mutation = this.transform(mutation).document;\n\n    variables = this.getVariables(mutation, variables) as TVariables;\n\n    if (this.transform(mutation).hasClientExports) {\n      variables = await this.localState.addExportedVariables(mutation, variables, context) as TVariables;\n    }\n\n    const mutationStoreValue =\n      this.mutationStore &&\n      (this.mutationStore[mutationId] = {\n        mutation,\n        variables,\n        loading: true,\n        error: null,\n      } as MutationStoreValue);\n\n    if (optimisticResponse) {\n      this.markMutationOptimistic<\n        TData,\n        TVariables,\n        TContext,\n        TCache\n      >(optimisticResponse, {\n        mutationId,\n        document: mutation,\n        variables,\n        fetchPolicy,\n        errorPolicy,\n        context,\n        updateQueries,\n        update: updateWithProxyFn,\n        keepRootFields,\n      });\n    }\n\n    this.broadcastQueries();\n\n    const self = this;\n\n    return new Promise((resolve, reject) => {\n      return asyncMap(\n        self.getObservableFromLink(\n          mutation,\n          {\n            ...context,\n            optimisticResponse,\n          },\n          variables,\n          false,\n        ),\n\n        (result: FetchResult<TData>) => {\n          if (graphQLResultHasError(result) && errorPolicy === 'none') {\n            throw new ApolloError({\n              graphQLErrors: result.errors,\n            });\n          }\n\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = null;\n          }\n\n          const storeResult: typeof result = { ...result };\n\n          if (typeof refetchQueries === \"function\") {\n            refetchQueries = refetchQueries(storeResult);\n          }\n\n          if (errorPolicy === 'ignore' &&\n              graphQLResultHasError(storeResult)) {\n            delete storeResult.errors;\n          }\n\n          return self.markMutationResult<\n            TData,\n            TVariables,\n            TContext,\n            TCache\n          >({\n            mutationId,\n            result: storeResult,\n            document: mutation,\n            variables,\n            fetchPolicy,\n            errorPolicy,\n            context,\n            update: updateWithProxyFn,\n            updateQueries,\n            awaitRefetchQueries,\n            refetchQueries,\n            removeOptimistic: optimisticResponse ? mutationId : void 0,\n            onQueryUpdated,\n            keepRootFields,\n          });\n        },\n\n      ).subscribe({\n        next(storeResult) {\n          self.broadcastQueries();\n\n          // At the moment, a mutation can have only one result, so we can\n          // immediately resolve upon receiving the first result. In the future,\n          // mutations containing @defer or @stream directives might receive\n          // multiple FetchResult payloads from the ApolloLink chain, so we will\n          // probably need to collect those results in this next method and call\n          // resolve only later, in an observer.complete function.\n          resolve(storeResult);\n        },\n\n        error(err: Error) {\n          if (mutationStoreValue) {\n            mutationStoreValue.loading = false;\n            mutationStoreValue.error = err;\n          }\n\n          if (optimisticResponse) {\n            self.cache.removeOptimistic(mutationId);\n          }\n\n          self.broadcastQueries();\n\n          reject(\n            err instanceof ApolloError ? err : new ApolloError({\n              networkError: err,\n            }),\n          );\n        },\n      });\n    });\n  }\n\n  public markMutationResult<\n    TData,\n    TVariables,\n    TContext,\n    TCache extends ApolloCache<any>\n  >(\n    mutation: {\n      mutationId: string;\n      result: FetchResult<TData>;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>;\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      awaitRefetchQueries?: boolean;\n      refetchQueries?: InternalRefetchQueriesInclude;\n      removeOptimistic?: string;\n      onQueryUpdated?: OnQueryUpdated<any>;\n      keepRootFields?: boolean;\n    },\n    cache = this.cache,\n  ): Promise<FetchResult<TData>> {\n    let { result } = mutation;\n    const cacheWrites: Cache.WriteOptions[] = [];\n    const skipCache = mutation.fetchPolicy === \"no-cache\";\n\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      cacheWrites.push({\n        result: result.data,\n        dataId: 'ROOT_MUTATION',\n        query: mutation.document,\n        variables: mutation.variables,\n      });\n\n      const { updateQueries } = mutation;\n      if (updateQueries) {\n        this.queries.forEach(({ observableQuery }, queryId) => {\n          const queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries, queryName)) {\n            return;\n          }\n          const updater = updateQueries[queryName];\n          const { document, variables } = this.queries.get(queryId)!;\n\n          // Read the current query result from the store.\n          const { result: currentQueryResult, complete } = cache.diff<TData>({\n            query: document!,\n            variables,\n            returnPartialData: true,\n            optimistic: false,\n          });\n\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            const nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables!,\n            });\n\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: 'ROOT_QUERY',\n                query: document!,\n                variables,\n              });\n            }\n          }\n        });\n      }\n    }\n\n    if (\n      cacheWrites.length > 0 ||\n      mutation.refetchQueries ||\n      mutation.update ||\n      mutation.onQueryUpdated ||\n      mutation.removeOptimistic\n    ) {\n      const results: any[] = [];\n\n      this.refetchQueries({\n        updateCache: (cache: TCache) => {\n          if (!skipCache) {\n            cacheWrites.forEach(write => cache.write(write));\n          }\n\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          const { update } = mutation;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              const diff = cache.diff<TData>({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: this.transform(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true,\n              });\n\n              if (diff.complete) {\n                result = { ...result, data: diff.result };\n              }\n            }\n\n            update(cache, result, {\n              context: mutation.context,\n              variables: mutation.variables,\n            });\n          }\n\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields) {\n            cache.modify({\n              id: 'ROOT_MUTATION',\n              fields(value, { fieldName, DELETE }) {\n                return fieldName === \"__typename\" ? value : DELETE;\n              },\n            });\n          }\n        },\n\n        include: mutation.refetchQueries,\n\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null,\n\n      }).forEach(result => results.push(result));\n\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results).then(() => result);\n      }\n    }\n\n    return Promise.resolve(result);\n  }\n\n  public markMutationOptimistic<TData, TVariables, TContext, TCache extends ApolloCache<any>>(\n    optimisticResponse: any,\n    mutation: {\n      mutationId: string;\n      document: DocumentNode;\n      variables?: TVariables;\n      fetchPolicy?: MutationFetchPolicy;\n      errorPolicy: ErrorPolicy;\n      context?: TContext;\n      updateQueries: UpdateQueries<TData>,\n      update?: MutationUpdaterFunction<TData, TVariables, TContext, TCache>;\n      keepRootFields?: boolean,\n    },\n  ) {\n    const data = typeof optimisticResponse === \"function\"\n      ? optimisticResponse(mutation.variables)\n      : optimisticResponse;\n\n    return this.cache.recordOptimisticTransaction(cache => {\n      try {\n        this.markMutationResult<TData, TVariables, TContext, TCache>({\n          ...mutation,\n          result: { data },\n        }, cache);\n      } catch (error) {\n        invariant.error(error);\n      }\n    }, mutation.mutationId);\n  }\n\n  public fetchQuery<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    networkStatus?: NetworkStatus,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.fetchQueryObservable<TData, TVars>(\n      queryId,\n      options,\n      networkStatus,\n    ).promise;\n  }\n\n  public getQueryStore() {\n    const store: Record<string, QueryStoreValue> = Object.create(null);\n    this.queries.forEach((info, queryId) => {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors,\n      };\n    });\n    return store;\n  }\n\n  public resetErrors(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  }\n\n  private transformCache = new (\n    canUseWeakMap ? WeakMap : Map\n  )<DocumentNode, TransformCacheEntry>();\n\n  public transform(document: DocumentNode) {\n    const { transformCache } = this;\n\n    if (!transformCache.has(document)) {\n      const transformed = this.cache.transformDocument(document);\n      const forLink = removeConnectionDirectiveFromDocument(\n        this.cache.transformForLink(transformed));\n\n      const clientQuery = this.localState.clientQuery(transformed);\n      const serverQuery = forLink && this.localState.serverQuery(forLink);\n\n      const cacheEntry: TransformCacheEntry = {\n        document: transformed,\n        // TODO These two calls (hasClientExports and shouldForceResolvers)\n        // could probably be merged into a single traversal.\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery,\n        serverQuery,\n        defaultVars: getDefaultValues(\n          getOperationDefinition(transformed)\n        ) as OperationVariables,\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: {\n          ...transformed,\n          definitions: transformed.definitions.map(def => {\n            if (def.kind === \"OperationDefinition\" &&\n                def.operation !== \"query\") {\n              return { ...def, operation: \"query\" as OperationTypeNode };\n            }\n            return def;\n          }),\n        }\n      };\n\n      const add = (doc: DocumentNode | null) => {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry);\n        }\n      }\n      // Add cacheEntry to the transformCache using several different keys,\n      // since any one of these documents could end up getting passed to the\n      // transform method again in the future.\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n\n    return transformCache.get(document)!;\n  }\n\n  private getVariables<TVariables>(\n    document: DocumentNode,\n    variables?: TVariables,\n  ): OperationVariables {\n    return {\n      ...this.transform(document).defaultVars,\n      ...variables,\n    };\n  }\n\n  public watchQuery<T, TVariables = OperationVariables>(\n    options: WatchQueryOptions<TVariables, T>,\n  ): ObservableQuery<T, TVariables> {\n    // assign variable default values if supplied\n    options = {\n      ...options,\n      variables: this.getVariables(\n        options.query,\n        options.variables,\n      ) as TVariables,\n    };\n\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n\n    const queryInfo = new QueryInfo(this);\n    const observable = new ObservableQuery<T, TVariables>({\n      queryManager: this,\n      queryInfo,\n      options,\n    });\n\n    this.queries.set(observable.queryId, queryInfo);\n\n    queryInfo.init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables,\n    });\n\n    return observable;\n  }\n\n  public query<TData, TVars = OperationVariables>(\n    options: QueryOptions<TVars, TData>,\n    queryId = this.generateQueryId(),\n  ): Promise<ApolloQueryResult<TData>> {\n    invariant(\n      options.query,\n      'query option is required. You must specify your GraphQL document ' +\n        'in the query option.',\n    );\n\n    invariant(\n      options.query.kind === 'Document',\n      'You must wrap the query string in a \"gql\" tag.',\n    );\n\n    invariant(\n      !(options as any).returnPartialData,\n      'returnPartialData option only supported on watchQuery.',\n    );\n\n    invariant(\n      !(options as any).pollInterval,\n      'pollInterval option only supported on watchQuery.',\n    );\n\n    return this.fetchQuery<TData, TVars>(\n      queryId,\n      options,\n    ).finally(() => this.stopQuery(queryId));\n  }\n\n  private queryIdCounter = 1;\n  public generateQueryId() {\n    return String(this.queryIdCounter++);\n  }\n\n  private requestIdCounter = 1;\n  public generateRequestId() {\n    return this.requestIdCounter++;\n  }\n\n  private mutationIdCounter = 1;\n  public generateMutationId() {\n    return String(this.mutationIdCounter++);\n  }\n\n  public stopQueryInStore(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryInStoreNoBroadcast(queryId: string) {\n    const queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  }\n\n  public clearStore(options: Cache.ResetOptions = {\n    discardWatches: true,\n  }): Promise<void> {\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(new InvariantError(\n      'Store reset while query was in flight (not completed in link chain)',\n    ));\n\n    this.queries.forEach(queryInfo => {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n\n    // begin removing data from the store\n    return this.cache.reset(options);\n  }\n\n  public getObservableQueries(\n    include: InternalRefetchQueriesInclude = \"active\",\n  ) {\n    const queries = new Map<string, ObservableQuery<any>>();\n    const queryNamesAndDocs = new Map<string | DocumentNode, boolean>();\n    const legacyQueryOptions = new Set<QueryOptions>();\n\n    if (Array.isArray(include)) {\n      include.forEach(desc => {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(this.transform(desc).document, false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n\n    this.queries.forEach(({ observableQuery: oq, document }, queryId) => {\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n\n        const {\n          queryName,\n          options: { fetchPolicy },\n        } = oq;\n\n        if (\n          fetchPolicy === \"standby\" ||\n          (include === \"active\" && !oq.hasObservers())\n        ) {\n          return;\n        }\n\n        if (\n          include === \"active\" ||\n          (queryName && queryNamesAndDocs.has(queryName)) ||\n          (document && queryNamesAndDocs.has(document))\n        ) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach((options: QueryOptions) => {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        const queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        const queryInfo = this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables,\n        });\n        const oq = new ObservableQuery({\n          queryManager: this,\n          queryInfo,\n          options: {\n            ...options,\n            fetchPolicy: \"network-only\",\n          },\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n\n    if (__DEV__ && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach((included, nameOrDoc) => {\n        if (!included) {\n          invariant.warn(`Unknown query ${\n            typeof nameOrDoc === \"string\" ? \"named \" : \"\"\n          }${\n            JSON.stringify(nameOrDoc, null, 2)\n          } requested in refetchQueries options.include array`);\n        }\n      });\n    }\n\n    return queries;\n  }\n\n  public reFetchObservableQueries(\n    includeStandby: boolean = false,\n  ): Promise<ApolloQueryResult<any>[]> {\n    const observableQueryPromises: Promise<ApolloQueryResult<any>>[] = [];\n\n    this.getObservableQueries(\n      includeStandby ? \"all\" : \"active\"\n    ).forEach((observableQuery, queryId) => {\n      const { fetchPolicy } = observableQuery.options;\n      observableQuery.resetLastResults();\n      if (includeStandby ||\n          (fetchPolicy !== \"standby\" &&\n           fetchPolicy !== \"cache-only\")) {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      this.getQuery(queryId).setDiff(null);\n    });\n\n    this.broadcastQueries();\n\n    return Promise.all(observableQueryPromises);\n  }\n\n  public setObservableQuery(observableQuery: ObservableQuery<any, any>) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  }\n\n  public startGraphQLSubscription<T = any>({\n    query,\n    fetchPolicy,\n    errorPolicy,\n    variables,\n    context = {},\n  }: SubscriptionOptions): Observable<FetchResult<T>> {\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n\n    const makeObservable = (variables: OperationVariables) =>\n      this.getObservableFromLink<T>(\n        query,\n        context,\n        variables,\n      ).map(result => {\n        if (fetchPolicy !== 'no-cache') {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            this.cache.write({\n              query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables,\n            });\n          }\n\n          this.broadcastQueries();\n        }\n\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors,\n          });\n        }\n\n        return result;\n      });\n\n    if (this.transform(query).hasClientExports) {\n      const observablePromise = this.localState.addExportedVariables(\n        query,\n        variables,\n        context,\n      ).then(makeObservable);\n\n      return new Observable<FetchResult<T>>(observer => {\n        let sub: ObservableSubscription | null = null;\n        observablePromise.then(\n          observable => sub = observable.subscribe(observer),\n          observer.error,\n        );\n        return () => sub && sub.unsubscribe();\n      });\n    }\n\n    return makeObservable(variables);\n  }\n\n  public stopQuery(queryId: string) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  }\n\n  private stopQueryNoBroadcast(queryId: string) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  }\n\n  public removeQuery(queryId: string) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).stop();\n    this.queries.delete(queryId);\n  }\n\n  public broadcastQueries() {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(info => info.notify());\n  }\n\n  public getLocalState(): LocalState<TStore> {\n    return this.localState;\n  }\n\n  private inFlightLinkObservables = new Map<\n    DocumentNode,\n    Map<string, Observable<FetchResult>>\n  >();\n\n  private getObservableFromLink<T = any>(\n    query: DocumentNode,\n    context: any,\n    variables?: OperationVariables,\n    deduplication: boolean =\n      // Prefer context.queryDeduplication if specified.\n      context?.queryDeduplication ??\n      this.queryDeduplication,\n  ): Observable<FetchResult<T>> {\n    let observable: Observable<FetchResult<T>>;\n\n    const { serverQuery } = this.transform(query);\n    if (serverQuery) {\n      const { inFlightLinkObservables, link } = this;\n\n      const operation = {\n        query: serverQuery,\n        variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext({\n          ...context,\n          forceFetch: !deduplication\n        }),\n      };\n\n      context = operation.context;\n\n      if (deduplication) {\n        const byVariables = inFlightLinkObservables.get(serverQuery) || new Map();\n        inFlightLinkObservables.set(serverQuery, byVariables);\n\n        const varJson = canonicalStringify(variables);\n        observable = byVariables.get(varJson);\n\n        if (!observable) {\n          const concast = new Concast([\n            execute(link, operation) as Observable<FetchResult<T>>\n          ]);\n\n          byVariables.set(varJson, observable = concast);\n\n          concast.cleanup(() => {\n            if (byVariables.delete(varJson) &&\n                byVariables.size < 1) {\n              inFlightLinkObservables.delete(serverQuery);\n            }\n          });\n        }\n\n      } else {\n        observable = new Concast([\n          execute(link, operation) as Observable<FetchResult<T>>\n        ]);\n      }\n    } else {\n      observable = new Concast([\n        Observable.of({ data: {} } as FetchResult<T>)\n      ]);\n      context = this.prepareContext(context);\n    }\n\n    const { clientQuery } = this.transform(query);\n    if (clientQuery) {\n      observable = asyncMap(observable, result => {\n        return this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context,\n          variables,\n        });\n      });\n    }\n\n    return observable;\n  }\n\n  private getResultsFromLink<TData, TVars>(\n    queryInfo: QueryInfo,\n    cacheWriteBehavior: CacheWriteBehavior,\n    options: Pick<WatchQueryOptions<TVars, TData>,\n      | \"variables\"\n      | \"context\"\n      | \"fetchPolicy\"\n      | \"errorPolicy\">,\n  ): Observable<ApolloQueryResult<TData>> {\n    const requestId = queryInfo.lastRequestId = this.generateRequestId();\n\n    return asyncMap(\n      this.getObservableFromLink(\n        queryInfo.document!,\n        options.context,\n        options.variables,\n      ),\n\n      result => {\n        const hasErrors = isNonEmptyArray(result.errors);\n\n        // If we interrupted this request by calling getResultsFromLink again\n        // with the same QueryInfo object, we ignore the old results.\n        if (requestId >= queryInfo.lastRequestId) {\n          if (hasErrors && options.errorPolicy === \"none\") {\n            // Throwing here effectively calls observer.error.\n            throw queryInfo.markError(new ApolloError({\n              graphQLErrors: result.errors,\n            }));\n          }\n          queryInfo.markResult(result, options, cacheWriteBehavior);\n          queryInfo.markReady();\n        }\n\n        const aqr: ApolloQueryResult<TData> = {\n          data: result.data,\n          loading: false,\n          networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n        };\n\n        if (hasErrors && options.errorPolicy !== \"ignore\") {\n          aqr.errors = result.errors;\n        }\n\n        return aqr;\n      },\n\n      networkError => {\n        const error = isApolloError(networkError)\n          ? networkError\n          : new ApolloError({ networkError });\n\n        // Avoid storing errors from older interrupted queries.\n        if (requestId >= queryInfo.lastRequestId) {\n          queryInfo.markError(error);\n        }\n\n        throw error;\n      },\n    );\n  }\n\n  public fetchQueryObservable<TData, TVars>(\n    queryId: string,\n    options: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus = NetworkStatus.loading,\n  ): Concast<ApolloQueryResult<TData>> {\n    const query = this.transform(options.query).document;\n    const variables = this.getVariables(query, options.variables) as TVars;\n    const queryInfo = this.getQuery(queryId);\n\n    let {\n      fetchPolicy = \"cache-first\" as WatchQueryFetchPolicy,\n      errorPolicy = \"none\" as ErrorPolicy,\n      returnPartialData = false,\n      notifyOnNetworkStatusChange = false,\n      context = {},\n    } = options;\n\n    const normalized = Object.assign({}, options, {\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy,\n      returnPartialData,\n      notifyOnNetworkStatusChange,\n      context,\n    });\n\n    const fromVariables = (variables: TVars) => {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      return this.fetchQueryByPolicy<TData, TVars>(\n        queryInfo,\n        normalized,\n        networkStatus,\n      );\n    };\n\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    this.fetchCancelFns.set(queryId, reason => {\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(() => concast.cancel(reason));\n    });\n\n    // A Concast<T> can be created either from an Iterable<Observable<T>>\n    // or from a PromiseLike<Iterable<Observable<T>>>, where T in this\n    // case is ApolloQueryResult<TData>.\n    const concast = new Concast(\n      // If the query has @export(as: ...) directives, then we need to\n      // process those directives asynchronously. When there are no\n      // @export directives (the common case), we deliberately avoid\n      // wrapping the result of this.fetchQueryByPolicy in a Promise,\n      // since the timing of result delivery is (unfortunately) important\n      // for backwards compatibility. TODO This code could be simpler if\n      // we deprecated and removed LocalState.\n      this.transform(normalized.query).hasClientExports\n        ? this.localState.addExportedVariables(\n          normalized.query,\n          normalized.variables,\n          normalized.context,\n        ).then(fromVariables)\n        : fromVariables(normalized.variables!)\n    );\n\n    concast.cleanup(() => {\n      this.fetchCancelFns.delete(queryId);\n      applyNextFetchPolicy(options);\n    });\n\n    return concast;\n  }\n\n  public refetchQueries<TResult>({\n    updateCache,\n    include,\n    optimistic = false,\n    removeOptimistic = optimistic ? makeUniqueId(\"refetchQueries\") : void 0,\n    onQueryUpdated,\n  }: InternalRefetchQueriesOptions<ApolloCache<TStore>, TResult>\n  ): InternalRefetchQueriesMap<TResult> {\n    const includedQueriesById = new Map<string, {\n      oq: ObservableQuery<any>;\n      lastDiff?: Cache.DiffResult<any>;\n      diff?: Cache.DiffResult<any>;\n    }>();\n\n    if (include) {\n      this.getObservableQueries(include).forEach((oq, queryId) => {\n        includedQueriesById.set(queryId, {\n          oq,\n          lastDiff: this.getQuery(queryId).getDiff(),\n        });\n      });\n    }\n\n    const results: InternalRefetchQueriesMap<TResult> = new Map;\n\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic,\n\n        onWatchUpdated(watch, diff, lastDiff) {\n          const oq =\n            watch.watcher instanceof QueryInfo &&\n            watch.watcher.observableQuery;\n\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n\n              let result: TResult | boolean | Promise<ApolloQueryResult<any>> =\n                onQueryUpdated(oq, diff, lastDiff);\n\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n              }\n\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, { oq, lastDiff, diff });\n            }\n          }\n        },\n      });\n    }\n\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(({ oq, lastDiff, diff }, queryId) => {\n        let result: TResult | boolean | Promise<ApolloQueryResult<any>> | undefined;\n\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            const info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n\n        if (result !== false) {\n          results.set(oq, result as InternalRefetchQueriesResult<TResult>);\n        }\n\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n\n    return results;\n  }\n\n  private fetchQueryByPolicy<TData, TVars>(\n    queryInfo: QueryInfo,\n    { query,\n      variables,\n      fetchPolicy,\n      refetchWritePolicy,\n      errorPolicy,\n      returnPartialData,\n      context,\n      notifyOnNetworkStatusChange,\n    }: WatchQueryOptions<TVars, TData>,\n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus: NetworkStatus,\n  ): ConcastSourcesIterable<ApolloQueryResult<TData>> {\n    const oldNetworkStatus = queryInfo.networkStatus;\n\n    queryInfo.init({\n      document: query,\n      variables,\n      networkStatus,\n    });\n\n    const readCache = () => queryInfo.getDiff(variables);\n\n    const resultsFromCache = (\n      diff: Cache.DiffResult<TData>,\n      networkStatus = queryInfo.networkStatus || NetworkStatus.loading,\n    ) => {\n      const data = diff.result;\n\n      if (__DEV__ &&\n          !returnPartialData &&\n          !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n\n      const fromData = (data: TData | undefined) => Observable.of({\n        data,\n        loading: isNetworkRequestInFlight(networkStatus),\n        networkStatus,\n        ...(diff.complete ? null : { partial: true }),\n      } as ApolloQueryResult<TData>);\n\n      if (data && this.transform(query).hasForcedResolvers) {\n        return this.localState.runResolvers({\n          document: query,\n          remoteResult: { data },\n          context,\n          variables,\n          onlyRunForcedResolvers: true,\n        }).then(resolved => fromData(resolved.data || void 0));\n      }\n\n      return fromData(data);\n    };\n\n    const cacheWriteBehavior =\n      fetchPolicy === \"no-cache\" ? CacheWriteBehavior.FORBID :\n      ( // Watched queries must opt into overwriting existing data on refetch,\n        // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n        networkStatus === NetworkStatus.refetch &&\n        refetchWritePolicy !== \"merge\"\n      ) ? CacheWriteBehavior.OVERWRITE\n        : CacheWriteBehavior.MERGE;\n\n    const resultsFromLink = () =>\n      this.getResultsFromLink<TData, TVars>(queryInfo, cacheWriteBehavior, {\n        variables,\n        context,\n        fetchPolicy,\n        errorPolicy,\n      });\n\n    const shouldNotify =\n      notifyOnNetworkStatusChange &&\n      typeof oldNetworkStatus === \"number\" &&\n      oldNetworkStatus !== networkStatus &&\n      isNetworkRequestInFlight(networkStatus);\n\n    switch (fetchPolicy) {\n    default: case \"cache-first\": {\n      const diff = readCache();\n\n      if (diff.complete) {\n        return [\n          resultsFromCache(diff, queryInfo.markReady()),\n        ];\n      }\n\n      if (returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-and-network\": {\n      const diff = readCache();\n\n      if (diff.complete || returnPartialData || shouldNotify) {\n        return [\n          resultsFromCache(diff),\n          resultsFromLink(),\n        ];\n      }\n\n      return [\n        resultsFromLink(),\n      ];\n    }\n\n    case \"cache-only\":\n      return [\n        resultsFromCache(readCache(), queryInfo.markReady()),\n      ];\n\n    case \"network-only\":\n      if (shouldNotify) {\n        return [\n          resultsFromCache(readCache()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"no-cache\":\n      if (shouldNotify) {\n        return [\n          // Note that queryInfo.getDiff() for no-cache queries does not call\n          // cache.diff, but instead returns a { complete: false } stub result\n          // when there is no queryInfo.diff already defined.\n          resultsFromCache(queryInfo.getDiff()),\n          resultsFromLink(),\n        ];\n      }\n\n      return [resultsFromLink()];\n\n    case \"standby\":\n      return [];\n    }\n  }\n\n  private getQuery(queryId: string): QueryInfo {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId)!;\n  }\n\n  private prepareContext(context = {}) {\n    const newContext = this.localState.prepareContext(context);\n    return {\n      ...newContext,\n      clientAwareness: this.clientAwareness,\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}